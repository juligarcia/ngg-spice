use super::types as ng_types;
use libc::*;

/*
After caller has loaded ngspice.dll, the simulator has to be initialized by calling
ngSpice_Init(...).

Address pointers of several callback functions, which are to be defined in the caller,
are sent to ngspice.dll. Most pointers allow a NULL value passed.

The int return value is not used.
*/
pub type NgSpiceInit = extern "C" fn(
    // SendChar
    // Callback function for reading printf, fprintf, fputs
    Option<unsafe extern "C" fn(*const c_char, c_int, *const c_void) -> c_int>,
    // SendStat
    // Callback function for reading status string and percent value
    Option<unsafe extern "C" fn(*const c_char, c_int, *const c_void) -> c_int>,
    // ControlledExit
    // Callback function for transferring a flag to caller, generated by ngspice
    // upon a call to function controlled_exit. May be used by caller to detach ngspice.dll,
    // if dynamically loaded or to try any other recovery method, or to exit. REQUIRED
    Option<unsafe extern "C" fn(c_int, bool, bool, c_int, *const c_void) -> c_int>,
    // SendData
    // Callback function for sending an array of structs containing data values of
    // all vectors in the current plot (simulation output)
    Option<
        unsafe extern "C" fn(*const ng_types::NgVecvaluesall, c_int, c_int, *const c_void) -> c_int,
    >,
    // SendInitData
    // Callback function for sending an array of structs containing info on all
    // vectors in the current plot (immediately before simulation starts)
    Option<unsafe extern "C" fn(*const ng_types::NgVecinfoall, c_int, *const c_void) -> c_int>,
    // NGThreadRunning
    // Callback function for sending a boolean signal (true if thread is running) (NULL allowed)
    Option<unsafe extern "C" fn(bool, c_int, *const c_void) -> c_int>,

    // Using the void pointer, you may send the object address of the calling function to ngspice.dll.
    // This pointer will be returned unmodified by any callback function.
    *const c_void,
) -> c_int;

pub type NgSpiceInitSync = extern "C" fn(
    // GetVSRCData
    Option<
        unsafe extern "C" fn(
            *const c_double,
            c_double,
            *const c_char,
            c_int,
            *const c_void,
        ) -> c_int,
    >,
    // GetISRCData
    Option<
        unsafe extern "C" fn(
            *const c_double,
            c_double,
            *const c_char,
            c_int,
            *const c_void,
        ) -> c_int,
    >,
    // GetSyncData
    Option<unsafe extern "C" fn(c_double, *const c_double, c_double, c_int, *const c_void) -> c_int>,

    *const c_int,

    // Using the void pointer, you may send the object address of the calling function to ngspice.dll.
    // This pointer will be returned unmodified by any callback function.
    *const c_void,
) -> c_int;

pub type NgSpiceCommand = extern "C" fn(*const c_char) -> c_int;

pub type NgSpiceVecInfo = extern "C" fn(*const c_char) -> *const ng_types::NgVectorinfo;

pub type NgSpiceCurPlot = extern "C" fn() -> *const c_char;

pub type NgSpiceAllPlots = extern "C" fn() -> *const *const c_char;

pub type NgSpiceAllVecs = extern "C" fn(*const c_char) -> *const *const c_char;

pub type NgSpiceRunning = extern "C" fn() -> bool;
